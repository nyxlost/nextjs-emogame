"use client"
import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import {
  Box,
  Button,
  Card,
  CardContent,
  CardMedia,
  Modal,
  Typography,
} from "@mui/material"
import Image from "next/image"

const emotions = [
  { name: "‡πÇ‡∏Å‡∏£‡∏ò", image: "/images/angry.jpg" },
  { name: "‡∏Å‡∏•‡∏±‡∏ß", image: "/images/fear.jpg" },
  { name: "‡∏≠‡∏¥‡∏à‡∏â‡∏≤", image: "/images/jealous.jpg" },
  { name: "‡πÄ‡∏®‡∏£‡πâ‡∏≤", image: "/images/sad.jpg" },
  { name: "‡∏≠‡∏≤‡∏¢", image: "/images/shy.jpg" },
  { name: "‡∏Å‡∏±‡∏á‡∏ß‡∏•", image: "/images/worried.jpg" },
]

const situations = [
  { name: "‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏π‡∏ú‡∏¥‡∏î", image: "/images/situation_1.jpg" },
  { name: "‡∏ó‡∏≥‡πÑ‡∏≠‡∏®‡∏Å‡∏£‡∏µ‡∏°‡∏´‡∏•‡πà‡∏ô", image: "/images/situation_2.jpg" },
  { name: "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ú‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏°", image: "/images/situation_3.jpg" },
  {
    name: "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°",
    image: "/images/situation_4.jpg",
  },
  { name: "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢", image: "/images/situation_5.jpg" },
  { name: "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏ß‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô", image: "/images/situation_6.jpg" },
  { name: "‡πÅ‡∏°‡πà‡πÑ‡∏°‡πà‡∏û‡∏≤‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß", image: "/images/situation_7.jpg" },
  { name: "‡πÅ‡∏°‡πà‡πÑ‡∏°‡πà‡∏û‡∏≤‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß", image: "/images/situation_8.jpg" },
  { name: "‡∏•‡∏∑‡∏°‡πÄ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏°‡∏≤‡∏™‡πà‡∏á", image: "/images/situation_9.jpg" },
  {
    name: "‡∏™‡∏≠‡∏ö‡∏ï‡∏Å‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡∏≠‡πà‡∏≤‡∏ô",
    image: "/images/situation_10.jpg",
  },
  { name: "‡πÉ‡∏™‡πà‡∏ä‡∏∏‡∏î‡∏°‡∏≤‡∏ú‡∏¥‡∏î‡∏ß‡∏±‡∏ô", image: "/images/situation_11.jpg" },
]

function shuffleArray<T>(array: T[]): T[] {
  return [...array].sort(() => Math.random() - 0.5)
}

export default function GameBoard() {
  const [numPlayers, setNumPlayers] = useState("3")
  const [players, setPlayers] = useState<string[]>([])
  const [currentPlayer, setCurrentPlayer] = useState(0)
  const [gameStarted, setGameStarted] = useState(false)
  const [revealed, setRevealed] = useState(false)
  const [roles, setRoles] = useState<string[]>([])
  const [playerSituations, setPlayerSituations] = useState<
    { name: string; image: string }[]
  >([])
  const [selectedEmo, setSelectedEmo] = useState<string>("")
  const [allCardsRevealed, setAllCardsRevealed] = useState(false)
  const [timer, setTimer] = useState<number>(420)
  const [timerActive, setTimerActive] = useState(false)
  const [spyWin, setSpyWin] = useState<boolean | null>(null)
  const [reviewPhase, setReviewPhase] = useState(false)
  const [spySelecting, setSpySelecting] = useState(false)
  const [open, setOpen] = useState(false)

  const startGame = () => {
    if (players.length < 3 || players.length > 6) return

    const newRoles = Array(players.length).fill("Citizen")
    const spyIndex = Math.floor(Math.random() * players.length)
    newRoles[spyIndex] = "Spy"
    setRoles(newRoles)

    const shuffledSituations = shuffleArray(situations).slice(0, players.length)
    setPlayerSituations(shuffledSituations)

    const randomEmo = emotions[Math.floor(Math.random() * emotions.length)]
    setSelectedEmo(randomEmo.name)

    setGameStarted(true)
    setAllCardsRevealed(false)
    setSpyWin(null)
  }

  const filteredEmo = emotions.find((emo) => emo.name === selectedEmo)

  const toggleCards = () => {
    setRevealed(!revealed)
  }

  const nextPlayer = () => {
    if (currentPlayer + 1 < players.length) {
      setCurrentPlayer(currentPlayer + 1)
      setRevealed(false)
    } else {
      setAllCardsRevealed(true)
    }
  }

  useEffect(() => {
    if (allCardsRevealed) {
      setTimerActive(true)
    }
  }, [allCardsRevealed])

  useEffect(() => {
    if (timerActive && timer > 0) {
      const interval = setInterval(() => {
        setTimer((prev) => prev - 1)
      }, 1000)
      return () => clearInterval(interval)
    } else if (timer === 0) {
      setTimerActive(false)
      setReviewPhase(true)
    }
  }, [timerActive, timer])

  const handleSpyGuess = (emo: string) => {
    setSpyWin(emo === selectedEmo)
  }

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white p-4">
      <h1 className="text-3xl font-bold mb-4">EMOSPY ‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå</h1>
      <Button onClick={() => setOpen(true)}>
        <span className="text-black bg-white p-3 rounded-md">‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤</span>
      </Button>

      {!gameStarted ? (
        <div className="flex flex-col items-center">
          <label className="mb-2">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (3-6) ‡∏Ñ‡∏ô :</label>
          <input
            type="text"
            value={numPlayers}
            onChange={(e) => {
              const value = e.target.value
              if (
                /^\d{0,1}$/.test(value) &&
                (value === "" || (Number(value) >= 3 && Number(value) <= 6))
              ) {
                setNumPlayers(value)
              }
            }}
            className="text-black mb-4 p-2"
          />
          <label className="mb-2">‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô </label>
          {Array.from({ length: Number(numPlayers) }).map((_, index) => (
            <input
              key={index}
              type="text"
              placeholder={`‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ${index + 1}`}
              className="text-black p-2 mb-2"
              onBlur={(e) => {
                const newPlayers = [...players]
                newPlayers[index] = e.target.value
                setPlayers(newPlayers)
              }}
            />
          ))}
          <Button onClick={startGame} className="py-2 px-4 mt-4">
            <span className="text-black bg-white p-3 border rounded-lg">
              ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
            </span>
          </Button>
        </div>
      ) : reviewPhase ? (
        <div className="text-center">
          <h2 className="text-2xl font-bold mt-5">
            {" "}
            ‡∏ñ‡πâ‡∏≤‡∏â‡∏±‡∏ô‡πÄ‡∏à‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ô‡∏µ‡πâ ‡∏â‡∏±‡∏ô‡∏à‡∏∞...{" "}
          </h2>
          <Button
            onClick={() => {
              setReviewPhase(false)
              setSpySelecting(true) // ‡πÉ‡∏´‡πâ Spy ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Emotion
            }}
            className="py-2 px-4"
          >
            <span className="text-black bg-white p-3 mt-5 border rounded-lg">
              ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
            </span>
          </Button>
        </div>
      ) : spySelecting ? (
        <div className="text-center">
          <h2 className="text-2xl font-bold mt-2">üîç ‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå</h2>
          <div className="grid grid-cols-3 gap-4 mt-4">
            {emotions.map((emo) => (
              <motion.div key={emo.name} whileTap={{ scale: 0.9 }}>
                <Card
                  onClick={() => handleSpyGuess(emo.name)}
                  className="cursor-pointer w-32 h-34 flex flex-col items-center justify-center bg-gray-800 border border-gray-600 text-center"
                >
                  <CardMedia
                    component="img"
                    image={emo.image}
                    alt={emo.name}
                    className="w-full h-full object-cover items-center"
                  />
                </Card>
                <span className="text-lg font-bold">{emo.name}</span>
              </motion.div>
            ))}
            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå */}
          </div>
          {spyWin !== null && (
            <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
              <div className="bg-white p-6 rounded-lg shadow-lg text-center">
                <h2 className="text-3xl font-bold text-black">
                  {spyWin ? "üéâ ‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å!" : "‚ùå ‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î!"}
                </h2>
                <Button
                  onClick={() => window.location.reload()}
                  className="mt-5"
                >
                  <span className="text-black hover:text-white bg-slate-400 hover:bg-black px-6 py-3 mt-5 text-xl rounded-md">
                    ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
                  </span>
                </Button>
              </div>
            </div>
          )}
        </div>
      ) : allCardsRevealed ? (
        <>
          <div className="text-center">
            <h2 className="text-2xl font-bold mt-5">‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° !</h2>
            <p className="text-lg mt-4">
              ‡πÄ‡∏ß‡∏•‡∏≤ : {Math.floor(timer / 60)}:
              {(timer % 60).toString().padStart(2, "0")}
            </p>
          </div>
          <div className="text-center mt-5">
            <h2 className="text-2xl font-bold">‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h2>
            <p className="text-lg mt-4">1. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡πá‡∏ß ‡πÜ ‡∏ô‡∏µ‡πâ ‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏±‡πâ‡∏¢</p>
            <p className="text-lg mt-4">
              2. ‡∏ñ‡πâ‡∏≤ (‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏°‡∏°‡∏ï‡∏¥) ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            </p>
            <p className="text-lg mt-4">
              3. ‡πÄ‡∏ò‡∏≠‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏á ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ò‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ô‡∏µ‡πâ
            </p>
            <p className="text-lg mt-4">
              4. ‡πÄ‡∏ò‡∏≠‡∏Å‡∏•‡πâ‡∏≤‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏°‡∏±‡πâ‡∏¢ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ò‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ô‡∏µ‡πâ
            </p>
            <p className="text-lg mt-4">5. ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ</p>
            <p className="text-lg mt-4">6. ‡∏à‡∏∞‡∏û‡∏π‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ</p>
            <p className="text-lg mt-4">7. ‡∏Ç‡∏≠ 3 ‡∏Ñ‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ</p>
            <p className="text-lg mt-4">8. ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏°‡∏±‡πâ‡∏¢</p>
            <p className="text-lg mt-4">9. ‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á 1 ‡∏ó‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ô‡∏µ‡πâ</p>
          </div>
          <Button onClick={() => setTimer(0)} className="py-2 px-4">
            <span className="text-black bg-white p-3 mt-5 border rounded-lg">
              ‡∏Ç‡πâ‡∏≤‡∏°
            </span>
          </Button>
        </>
      ) : (
        <div className="flex flex-col items-center">
          <h2 className="text-xl mb-4">‡∏£‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á {players[currentPlayer]}</h2>

          <div className="flex gap-4">
            <motion.div whileTap={{ scale: 0.9 }}>
              <Card
                onClick={toggleCards}
                className="cursor-pointer w-40 h-56 flex items-center justify-center bg-gray-800 border border-gray-600 text-center"
              >
                <CardContent>
                  {revealed ? (
                    roles[currentPlayer] === "Spy" ? (
                      <span className="text-lg font-bold">‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö</span>
                    ) : (
                      <div>
                        <Image
                          src={filteredEmo?.image || "/images/default.jpg"}
                          alt={filteredEmo?.name || "Default Emotion"}
                          className="w-full h-auto object-cover rounded"
                          width={160}
                          height={224}
                        />
                      </div>
                    )
                  ) : (
                    <span className="text-gray-400">‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π</span>
                  )}
                </CardContent>
              </Card>
              {revealed &&
                (roles[currentPlayer] === "Spy" ? (
                  <span className="text-lg font-bold">‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö</span>
                ) : (
                  <div>
                    <span className="text-lg font-bold w-full flex justify-center mt-2">
                      {filteredEmo?.name}
                    </span>
                  </div>
                ))}
            </motion.div>

            <motion.div whileTap={{ scale: 0.9 }}>
              <Card
                onClick={toggleCards}
                className="cursor-pointer w-40 h-56 flex items-center justify-center bg-gray-800 border border-gray-600 text-center"
              >
                <CardContent>
                  {revealed ? (
                    roles[currentPlayer] === "Spy" ? (
                      <span className="text-lg font-bold">‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö</span>
                    ) : (
                      <div>
                        <Image
                          src={playerSituations[currentPlayer].image}
                          alt={playerSituations[currentPlayer].name}
                          className="w-full h-auto object-cover rounded"
                          width={160}
                          height={224}
                        />
                      </div>
                    )
                  ) : (
                    <span className="text-gray-400">‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π</span>
                  )}
                </CardContent>
              </Card>
              {revealed &&
                (roles[currentPlayer] === "Spy" ? (
                  <span className="text-lg font-bold">‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö</span>
                ) : (
                  <div>
                    <span className="text-lg font-bold w-full flex justify-center mt-2">
                      {playerSituations[currentPlayer].name}
                    </span>
                  </div>
                ))}
            </motion.div>
          </div>

          <Button onClick={nextPlayer}>
            <span className="text-black bg-white p-3 mt-5 text-xl">
              ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            </span>
          </Button>
        </div>
      )}

      <Modal open={open} onClose={() => setOpen(false)}>
        <Box className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-lg shadow-lg w-96 h-96 overflow-y-auto">
          <Typography variant="h5" className="font-bold text-center">
            üìù ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
          </Typography>
          <Typography className="mt-3">
            1.‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô <br />
            - ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 3-6 ‡∏Ñ‡∏ô <br />- ‡∏°‡∏µ 1 ‡∏Ñ‡∏ô ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö (Spy)
            ‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà ‡πÇ‡∏Å‡∏£‡∏ò ‡∏Å‡∏•‡∏±‡∏ß ‡∏Å‡∏±‡∏á‡∏ß‡∏• ‡∏≠‡∏¥‡∏à‡∏â‡∏≤ ‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡∏≠‡∏≤‡∏¢
          </Typography>
          <Typography className="mt-3">
            2.‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó <br />
            - ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö) ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
            ‡πÅ‡∏ï‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô <br />-
            ‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
          </Typography>
          <Typography className="mt-3">
            3.‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡πà‡∏ô <br />
            - ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡∏ú‡∏•‡∏±‡∏î‡∏Å‡∏±‡∏ô‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏° ‡∏´‡∏£‡∏∑‡∏≠
            ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏û‡∏∂‡πà‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏´‡∏° ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô <br />
            - ‡∏´‡πâ‡∏≤‡∏°‡∏ñ‡∏≤‡∏°‡∏ï‡∏£‡∏á ‡πÜ ‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
            ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏û‡∏π‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏á ‡πÜ <br />
            - ‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô <br />
            - ‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 7 ‡∏ô‡∏≤‡∏ó‡∏µ
            ‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ô‡∏±‡πâ‡∏ô
            ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ú‡∏•‡∏±‡∏î‡∏Å‡∏±‡∏ô‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏õ <br />
            - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ú‡∏•‡∏±‡∏î‡∏Å‡∏±‡∏ô‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            ‡∏à‡∏∂‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö ‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å <br />
          </Typography>
          <Typography className="mt-3">
            4.‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ú‡∏•‡πÅ‡∏û‡πâ‡∏ä‡∏ô‡∏∞ <br />
            - ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏´‡∏≤‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡πÄ‡∏à‡∏≠ ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î ‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡∏à‡∏∞‡πÅ‡∏û‡πâ <br />
            - ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏´‡∏≤‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å ‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡∏à‡∏∞‡∏ä‡∏ô‡∏∞ <br />
            - ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏´‡∏≤‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î ‡∏´‡∏£‡∏∑‡∏≠
            ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏´‡∏≤‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡πÄ‡∏à‡∏≠ ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å ‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠‡∏Å‡∏±‡∏ô <br />
          </Typography>
          <p className="mt-3 font-medium text-lg"> ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è </p>

          <Button
            onClick={() => setOpen(false)}
            className="mt-4 w-full bg-gray-800 text-white py-2 rounded-md"
          >
            ‡∏õ‡∏¥‡∏î
          </Button>
        </Box>
      </Modal>
    </div>
  )
}
